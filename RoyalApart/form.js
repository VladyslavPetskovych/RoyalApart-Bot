const axios = require("axios");
const bot = require("./bot");
const roomMap = new Map();
const userStates = {};
const formButtons = {
  reply_markup: JSON.stringify({
    inline_keyboard: [
      [{ text: "–ó–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ", callback_data: "change form" }],
      [
        {
          text: "–î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è üìù",
          callback_data: "coment form",
        },
      ],
      [{ text: "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data: "user data" }],
      [{ text: "üîô –ú–µ–Ω—é ‚óè", callback_data: "back_to_menu" }],
    ],
  }),
};

const cooldowns = new Map();

const resetUserState = (chatId) => {
  roomMap.delete(chatId); // Remove the user's data from roomMap
  delete userStates[chatId]; // If you're using a separate userStates object
  console.log(`User state reset for chatId: ${chatId}`);
};


const sendUserData = async (chatId) => {
  const userData = roomMap.get(chatId);

  // Check if phone number exists
  if (!userData || !userData.phone) {
    bot.sendMessage(
      chatId,
      "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–µ—Ä–µ–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è–º."
    );
    return;
  }

  const currentTime = Date.now();
  if (cooldowns.has(chatId)) {
    const lastSentTime = cooldowns.get(chatId);
    const timeDifference = currentTime - lastSentTime;
    const cooldownDuration = 60 * 1000; // 1 minute in milliseconds

    if (timeDifference < cooldownDuration) {
      const remainingTime = cooldownDuration - timeDifference;
      const remainingSeconds = Math.ceil(remainingTime / 1000);
      bot.sendMessage(
        chatId,
        `–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ ${remainingSeconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è–º.`
      );
      return; // Exit the function if still in cooldown
    }
  }

  // Send data if no cooldown and phone is provided
  console.log("!!!!!USER DATA IS SENT!!!!!");
  console.log(chatId);
  let data = {
    chatId: chatId,
  };
  await axios.post("http://localhost:3000/email/sendEmail", data);
  bot.sendMessage(
    chatId,
    "–í–∞—à—ñ –¥–∞–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –¥—è–∫—É—î–º–æ –∑–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –æ—á—ñ–∫—É–π—Ç–µ."
  );

  resetUserState(chatId);

  // Update cooldown timestamp
  cooldowns.set(chatId, currentTime);
};

const askForName = async (chatId) => {
  bot.sendMessage(chatId, `\n–ù–∞–ø–∏—à—ñ—Ç—å –í–∞—à–µ —ñ–º'—è: \t...‚úçÔ∏è`);
  const message = await waitForUserInput(chatId);
  console.log(`User name: ${message.text}`);

  try {
    await axios.post("http://localhost:3000/users", {
      chatId: chatId,
      name: message.text,
    });
  } catch (error) {
    console.error("Error:", error.message);
  }

  return message.text;
};

const waitForUserInput = (chatId) => {
  return new Promise((resolve) => {
    userResolvers.set(chatId, resolve);

    const messageListener = (message) => {
      if (message.text.startsWith("/")) {
        return;
      }
      const resolver = userResolvers.get(message.chat.id);
      if (resolver) {
        resolver(message);
        userResolvers.delete(message.chat.id);

        bot.removeListener("message", messageListener);
      }
    };

    userListeners.set(chatId, messageListener);
    bot.on("message", messageListener);
  });
};

const askForPhone = async (chatId) => {
  bot.sendMessage(
    chatId,
    `–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:`,
    {
      reply_markup: {
        keyboard: [
          [
            {
              text: "üì≤ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
              request_contact: true, // This allows the user to send their contact
            },
          ],
        ],
        one_time_keyboard: true, // The keyboard will disappear after use
        resize_keyboard: true, // Resize keyboard for better visibility
      },
    }
  );

  return new Promise((resolve) => {
    const contactListener = (msg) => {
      if (msg.contact && msg.chat.id === chatId) {
        const phoneNumber = msg.contact.phone_number;
        console.log(`Received phone number: ${phoneNumber}`);

        // Send phone number to server
        axios
          .post("http://localhost:3000/users", {
            chatId: chatId,
            phone: phoneNumber,
          })
          .then(() => {
            bot.sendMessage(
              chatId,
              `–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É ${phoneNumber} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ.`
            );
            console.log(
              `Phone number ${phoneNumber} saved for chatId: ${chatId}`
            );
          })
          .catch((error) => {
            console.error("Error saving phone number:", error);
            bot.sendMessage(
              chatId,
              "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤–∞—à–æ–≥–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É."
            );
          });

        resolve(phoneNumber);
        bot.removeListener("message", contactListener); // Remove listener after resolving
      }
    };

    bot.on("message", contactListener);
  });
};

const userResolvers = new Map();
const userListeners = new Map();

const form = async (receivedChatId) => {
  let userData = roomMap.get(receivedChatId) || {};

  // Ask for name if it's not provided
  if (!userData.name) {
    const userName = await askForName(receivedChatId);
    userData.name = userName;
    roomMap.set(receivedChatId, userData);
  }

  // Ask for phone if it's not provided
  if (!userData.phone) {
    const userPhone = await askForPhone(receivedChatId);
    userData.phone = userPhone;
    roomMap.set(receivedChatId, userData);
  }

  // Now both name and phone should be provided
  const response = await axios.get(
    `http://localhost:3000/users/${receivedChatId}`
  );
  let Userinf = response.data;

  let roomMessage;
  if (Userinf.context === "a") {
    roomMessage = `–í–∏ –æ–±—Ä–∞–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É ${Userinf.currentroom.name}`;
  } else {
    roomMessage =
      Userinf.currentroom.price > 10000
        ? `–í–∏ –æ–±—Ä–∞–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É ${Userinf.currentroom.name} - –î–æ–≥–æ–≤—ñ—Ä–Ω–∞ —Ü—ñ–Ω–∞`
        : `–í–∏ –æ–±—Ä–∞–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É ${Userinf.currentroom.name} –∑–∞ —Ü—ñ–Ω–æ—é: ${Userinf.currentroom.price}–≥—Ä–Ω`;
  }

  bot.sendMessage(
    receivedChatId,
    `${roomMessage}\n\n\n\t–í–∞—à—ñ –¥–∞–Ω—ñ: \n—ñ–º'—è: ${
      userData.name
    }\n–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${userData.phone} \n–ö–æ–º–µ–Ω—Ç–∞—Ä: ${Userinf.coment || "-"}`,
    formButtons
  );
};

const askForComment = async (chatId) => {
  bot.sendMessage(chatId, `–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä: \t...\t‚úçÔ∏è`);
  const message = await waitForUserInput(chatId);
  try {
    await axios.post("http://localhost:3000/users", {
      chatId: chatId,
      coment: message.text,
    });
  } catch (error) {
    console.error("Error:", error.message);
  }
  const response = await axios.get(`http://localhost:3000/users/${chatId}`);
  let Userinf = response.data;

  let roomMessage;
  if (Userinf.context === "a") {
    roomMessage = `–í–∏ –æ–±—Ä–∞–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É ${Userinf.currentroom.name}`;
  } else {
    roomMessage =
      Userinf.currentroom.price > 10000
        ? `–í–∏ –æ–±—Ä–∞–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É ${Userinf.currentroom.name} - –î–æ–≥–æ–≤—ñ—Ä–Ω–∞ —Ü—ñ–Ω–∞`
        : `–í–∏ –æ–±—Ä–∞–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É ${Userinf.currentroom.name} –∑–∞ —Ü—ñ–Ω–æ—é: ${Userinf.currentroom.price}–≥—Ä–Ω`;
  }

  bot.sendMessage(
    chatId,
    `${roomMessage}\n\n\n\t–í–∞—à—ñ –¥–∞–Ω—ñ: \n—ñ–º'—è: ${Userinf.name}\n–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${Userinf.phone} \n–ö–æ–º–µ–Ω—Ç–∞—Ä:  ${Userinf.coment}`,
    formButtons
  );
  return message.text;
};

bot.on("callback_query", async (query) => {
  const callbackData = query.data;

  if (callbackData === "user data") {
    console.log(
      "Sended data !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    );
    sendUserData(query.message.chat.id);
  }

  if (callbackData === "change form") {
    await resetUserState(query.message.chat.id);
    await form(query.message.chat.id);
    askForComment(query.message.chat.id);
  }
  if (callbackData === "coment form") {
    askForComment(query.message.chat.id);
  }
});
module.exports = form;
